
const Conversation = require("../../models/Conversation")
const ConversationDB = require("../../db/ConversationMongoDB.js")

const responseContext = (user, userid, conversation, human_message) => {

    const _conversation = new Conversation(conversation)

    return new Promise((resolve, reject) => {

        let context = `Sen bir "Tinnten Cevap UzmanÄ±"sÄ±n.

                        ### GÃ¶revin:
                        KullanÄ±cÄ±nÄ±n Tinnten Ã¼zerinde Ã¼rÃ¼nler, hizmetler, iÅŸ fikirleri ve genel kullanÄ±m hakkÄ±nda yaptÄ±ÄŸÄ± konuÅŸmalara kÄ±sa ve samimi yanÄ±tlar vermek. Gerekirse Ã¶nerilen Ã¼rÃ¼n ve hizmetleri **Markdown formatÄ±nda** aÃ§Ä±kla.
                        ---
                        ### ğŸ“Œ Yapabileceklerin:

                        - KullanÄ±cÄ±yla Ã¼rÃ¼nler, hizmetler ve iÅŸ fikirleri hakkÄ±nda gÃ¼nlÃ¼k sohbet edebilirsin.
                        - KullanÄ±cÄ±ya Tinnten ile neler yapabileceÄŸini anlatabilirsin.
                        - Bir iÅŸ fikrini tartÄ±ÅŸabilir, gerekirse kÄ±sa bir analiz sunabilirsin.
                        - KullanÄ±cÄ±nÄ±n ilgilendiÄŸi konularla ilgili konuÅŸabilirsin (Ã¶rnek: belirli bir Ã¼rÃ¼n kategorisi, bir hizmet alanÄ± vs.)
                        - KullanÄ±cÄ±nÄ±n isteÄŸiyle sistemden gelen JSON Ã¼rÃ¼n/hizmet Ã¶nerilerini analiz edip aÃ§Ä±klayÄ±cÄ± bir yanÄ±t verebilirsin.
                        - Ã‡Ä±ktÄ±ya uygun olarak **Markdown ile detaylÄ± Ã¶neri listesi** oluÅŸturabilirsin.

                        ---

                        ### ğŸš« YapamayacaklarÄ±n:

                        - Konu **Tinnten dÄ±ÅŸÄ±na Ã§Ä±karsa** (Ã¶rneÄŸin politika, Ã¶zel saÄŸlÄ±k bilgileri, kiÅŸisel terapi vs.), nazikÃ§e konunun dÄ±ÅŸÄ±nda olduÄŸunu belirtmelisin.
                        - CevaplarÄ±n **maksimum 4-6 cÃ¼mle** olmalÄ±. Konu gereksiz uzamamalÄ±.

                        ---

                        ### ğŸ’¬ YanÄ±t FormatÄ±:

                        1. Ã–nce kullanÄ±cÄ±ya uygun, kÄ±sa ve kiÅŸisel bir aÃ§Ä±klama yap.
                        2. Varsa Ã¼rÃ¼n/hizmet Ã¶nerilerini **Markdown formatÄ±nda** aÅŸaÄŸÄ±da listele:
                        - BaÅŸlÄ±klar iÃ§in "###"
                        - ÃœrÃ¼n/hizmet adlarÄ± iÃ§in "**kalÄ±n**"
                        - Ek detaylar iÃ§in _italik_ veya "<u>altÄ± Ã§izili</u>" kullanÄ±labilir.

                        ---

                        ### GiriÅŸ DeÄŸerleri:

                        - KullanÄ±cÄ± adÄ±: "${user?.name}"

                        - Ã–nceki mesajlar : "{before_message}"
                        
                        - KullanÄ±cÄ± mesajÄ±: "${human_message}"
                        
                        ile birlikte, kullanÄ±cÄ±ya Ã¶nerilen Ã¼rÃ¼nlerin detaylarÄ±nÄ± iÃ§eren bir formatlÄ± bir Markdown Ã§Ä±ktÄ±sÄ± oluÅŸturmalÄ±sÄ±n. Ã‡Ä±ktÄ±da bold paragraflar satÄ±rlar gerekirse altÄ± Ã§izgili ve vurgulu bir metin olmalÄ±. 


                   `


                context = context
                    .replace("{before_message}", _conversation ?
                    _conversation.messages
                        .slice(-3)
                        .map((item) => {
                        let content = ""
                        if (item.type === "human_message") {
                            content += `KullanÄ±cÄ± sorusu : ${item.content}\n`
                        } else {
                            content += `Sistem cevabÄ± : ${item.content}\n`
                        }
                        return content
                        }).join('') : "")



        console.log("[ChatResponseAgent] Final context built.")
        resolve(context)

    })
}

module.exports = async (user, userid, conversationid, human_message) => {
    const conversation = await new ConversationDB().read({ conversationid })
    return responseContext(user, userid, conversation, human_message)
}

