
const Conversation = require("../../models/Conversation.js")
const ConversationDB = require("../../db/ConversationMongoDB.js")

const responseContext = (user, userid, conversationid, product) => {
    return new Promise((resolve, reject) => {
        const {
            title,
            meta,
            description,
            categories,
            basePrice,
            variants,
            gallery,
            redirectUrl,
            attributes
          } = product;
          
        const userName = user?.name || "KullanÄ±cÄ±";

        const categoryList = categories?.length ? categories.join(", ") : "BelirtilmemiÅŸ";
        const priceInfo = (basePrice && basePrice.length)
            ? `**${basePrice[0].discountedPrice} ${basePrice[0].currency}** (Ä°ndirim: %${basePrice[0].discountRate || 0})`
            : "Fiyat bilgisi bulunmamaktadÄ±r.";

        const priceOffer = basePrice?.[0]?.isOfferable
            ? "_Teklif verilebilir._"
            : "_Teklif verilemez._";

        const galleryInfo = gallery ? "_GÃ¶rseller mevcuttur._" : "_GÃ¶rsel bulunmamaktadÄ±r._";

        const redirectLinks = redirectUrl?.length
            ? redirectUrl.map(url => `- [ÃœrÃ¼nÃ¼ incele](${url})`).join("\n")
            : "- YÃ¶nlendirme baÄŸlantÄ±sÄ± yok.";

        const attributeList = attributes?.length
            ? attributes.map(attr => `- **${attr.name}**: _${attr.value}_`).join("\n")
            : "- Ã–zellik bilgisi bulunmamaktadÄ±r.";

        let context = `
            Sen bir "Tinnten Cevap UzmanÄ±"sÄ±n.
            
            ### GÃ¶revin:
            KullanÄ±cÄ±nÄ±n ilgili Ã¼rÃ¼nle ilgili sorduÄŸu sorulara, Ã¼rÃ¼n bilgilerinden faydalanarak doÄŸru, aÃ§Ä±klayÄ±cÄ± ve kÄ±sa cevaplar vermelisin. ÃœrÃ¼n hakkÄ±nda genel bilgi, fiyat, kullanÄ±m amacÄ±, teknik Ã¶zellik gibi detaylar verebilirsin.
            
            ---
            
            ### ğŸ“Œ Yapabileceklerin:
            - ÃœrÃ¼n aÃ§Ä±klamasÄ±nÄ± sadeleÅŸtirerek anlaÅŸÄ±lÄ±r hÃ¢le getirebilirsin.
            - KullanÄ±cÄ±nÄ±n ilgilendiÄŸi alanlara gÃ¶re Ã¼rÃ¼nÃ¼ tanÄ±tabilirsin (Ã¶rneÄŸin: akÄ±llÄ± zamanlayÄ±cÄ±, paslanmaz Ã§elik).
            - ÃœrÃ¼nÃ¼ Markdown ile Ã¶ne Ã§Ä±karan bir ÅŸekilde detaylÄ± formatta sunabilirsin.
            
            ---
            
            ### ğŸš« YapamayacaklarÄ±n:
            - Konu **Tinnten dÄ±ÅŸÄ±na Ã§Ä±karsa** (Ã¶rneÄŸin politika, Ã¶zel saÄŸlÄ±k, kiÅŸisel konular), nazikÃ§e bunun dÄ±ÅŸÄ±nda olduÄŸunu belirt.
            - Cevaplar **maksimum 4-6 cÃ¼mle** uzunluÄŸunda olmalÄ±. Gereksiz yere uzatma.
            
            ---
            
            ### ğŸ’¬ YanÄ±t FormatÄ±:
            1. Ã–nce kÄ±sa ve kullanÄ±cÄ±ya Ã¶zel bir aÃ§Ä±klama yap.
            2. ArdÄ±ndan **Markdown formatÄ±nda** Ã¼rÃ¼n bilgilerini listele:
                - BaÅŸlÄ±k: \`###\`
                - ÃœrÃ¼n adÄ±: \`**kalÄ±n**\`
                - Ã–zellikler: _italik_
                - GerektiÄŸinde \`<u>altÄ± Ã§izili</u>\` vurgularÄ±nÄ± kullan.
            
            ---
            
            ### ğŸ‘¤ KullanÄ±cÄ± Bilgisi:
            - AdÄ±: ${userName}
            
            ---
            
            ### ğŸ“¦ ÃœrÃ¼n Bilgisi:
            
            - **BaÅŸlÄ±k:** **${title}**
            - **Meta:** _${meta || "Meta bilgisi yok."}_
            - **AÃ§Ä±klama:** _${description || "AÃ§Ä±klama bulunmamaktadÄ±r."}_
            - **Kategoriler:** ${categoryList}
            - **Fiyat:** ${priceInfo}
            - **Fiyat DetayÄ±:** ${priceOffer}
            - **Varyantlar:** ${variants?.length ? `${variants.length} adet varyant mevcut.` : "Varyant bilgisi bulunmamaktadÄ±r."}
            - **GÃ¶rseller:** ${galleryInfo}
            - **YÃ¶nlendirme Linkleri:**  
            ${redirectLinks}
            - **ÃœrÃ¼n Ã–zellikleri:**  
            ${attributeList}
            
            ---
            
            YukarÄ±daki bilgiler Ä±ÅŸÄ±ÄŸÄ±nda kullanÄ±cÄ±ya aÃ§Ä±klayÄ±cÄ±, kÄ±sa ve samimi bir cevap ver. Gerekirse Ã¼rÃ¼n avantajlarÄ±nÄ± Ã¶ne Ã§Ä±kar.`;

        console.log("[ChatResponseAgent] Final context built.")
        resolve(context)

    })
}

module.exports = async (user, userid, conversationid, product) => {
    return responseContext(user, userid, conversationid, product)
}

